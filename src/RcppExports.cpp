// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calcOverlap
double calcOverlap(Date start1, Date end1, Date start2, Date end2);
RcppExport SEXP _Cohort2Trajectory_calcOverlap(SEXP start1SEXP, SEXP end1SEXP, SEXP start2SEXP, SEXP end2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Date >::type start1(start1SEXP);
    Rcpp::traits::input_parameter< Date >::type end1(end1SEXP);
    Rcpp::traits::input_parameter< Date >::type start2(start2SEXP);
    Rcpp::traits::input_parameter< Date >::type end2(end2SEXP);
    rcpp_result_gen = Rcpp::wrap(calcOverlap(start1, end1, start2, end2));
    return rcpp_result_gen;
END_RCPP
}
// mergeCohorts
DataFrame mergeCohorts(DataFrame data, double threshold, std::vector<int> patientIDs);
RcppExport SEXP _Cohort2Trajectory_mergeCohorts(SEXP dataSEXP, SEXP thresholdSEXP, SEXP patientIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeCohorts(data, threshold, patientIDs));
    return rcpp_result_gen;
END_RCPP
}
// combineCohorts
DataFrame combineCohorts(DataFrame data, NumericVector threshold, std::vector<int> patientIDs);
RcppExport SEXP _Cohort2Trajectory_combineCohorts(SEXP dataSEXP, SEXP thresholdSEXP, SEXP patientIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(combineCohorts(data, threshold, patientIDs));
    return rcpp_result_gen;
END_RCPP
}
// getDiscreteStates
DataFrame getDiscreteStates(int stateSelection, std::string oocFix, int stateDuration, std::vector<int> patientIDs, DataFrame patientData, std::vector<std::string> statePriorityVector, Rcpp::List allowedStatesList);
RcppExport SEXP _Cohort2Trajectory_getDiscreteStates(SEXP stateSelectionSEXP, SEXP oocFixSEXP, SEXP stateDurationSEXP, SEXP patientIDsSEXP, SEXP patientDataSEXP, SEXP statePriorityVectorSEXP, SEXP allowedStatesListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type stateSelection(stateSelectionSEXP);
    Rcpp::traits::input_parameter< std::string >::type oocFix(oocFixSEXP);
    Rcpp::traits::input_parameter< int >::type stateDuration(stateDurationSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type statePriorityVector(statePriorityVectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type allowedStatesList(allowedStatesListSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiscreteStates(stateSelection, oocFix, stateDuration, patientIDs, patientData, statePriorityVector, allowedStatesList));
    return rcpp_result_gen;
END_RCPP
}
// removeAfterAbsorbingStatesContinuous
DataFrame removeAfterAbsorbingStatesContinuous(DataFrame patientData, std::vector<int> patientIDs, std::vector<std::string> absorbingStates);
RcppExport SEXP _Cohort2Trajectory_removeAfterAbsorbingStatesContinuous(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP absorbingStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type absorbingStates(absorbingStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(removeAfterAbsorbingStatesContinuous(patientData, patientIDs, absorbingStates));
    return rcpp_result_gen;
END_RCPP
}
// removeAfterAbsorbingStatesDiscrete
DataFrame removeAfterAbsorbingStatesDiscrete(DataFrame patientData, std::vector<int> patientIDs, std::vector<std::string> absorbingStates);
RcppExport SEXP _Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP absorbingStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type absorbingStates(absorbingStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(removeAfterAbsorbingStatesDiscrete(patientData, patientIDs, absorbingStates));
    return rcpp_result_gen;
END_RCPP
}
// removeProhibitedTransitionsContinuous
DataFrame removeProhibitedTransitionsContinuous(DataFrame patientData, std::vector<int> patientIDs, List allowedStatesList);
RcppExport SEXP _Cohort2Trajectory_removeProhibitedTransitionsContinuous(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP allowedStatesListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< List >::type allowedStatesList(allowedStatesListSEXP);
    rcpp_result_gen = Rcpp::wrap(removeProhibitedTransitionsContinuous(patientData, patientIDs, allowedStatesList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Cohort2Trajectory_calcOverlap", (DL_FUNC) &_Cohort2Trajectory_calcOverlap, 4},
    {"_Cohort2Trajectory_mergeCohorts", (DL_FUNC) &_Cohort2Trajectory_mergeCohorts, 3},
    {"_Cohort2Trajectory_combineCohorts", (DL_FUNC) &_Cohort2Trajectory_combineCohorts, 3},
    {"_Cohort2Trajectory_getDiscreteStates", (DL_FUNC) &_Cohort2Trajectory_getDiscreteStates, 7},
    {"_Cohort2Trajectory_removeAfterAbsorbingStatesContinuous", (DL_FUNC) &_Cohort2Trajectory_removeAfterAbsorbingStatesContinuous, 3},
    {"_Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete", (DL_FUNC) &_Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete, 3},
    {"_Cohort2Trajectory_removeProhibitedTransitionsContinuous", (DL_FUNC) &_Cohort2Trajectory_removeProhibitedTransitionsContinuous, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Cohort2Trajectory(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
