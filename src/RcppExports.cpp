// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getDiscreteStates
DataFrame getDiscreteStates(int stateSelection, int stateDuration, std::vector<int> patientIDs, DataFrame patientData, std::vector<std::string> statePriorityVector, Rcpp::List allowedStatesList);
RcppExport SEXP _Cohort2Trajectory_getDiscreteStates(SEXP stateSelectionSEXP, SEXP stateDurationSEXP, SEXP patientIDsSEXP, SEXP patientDataSEXP, SEXP statePriorityVectorSEXP, SEXP allowedStatesListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type stateSelection(stateSelectionSEXP);
    Rcpp::traits::input_parameter< int >::type stateDuration(stateDurationSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type statePriorityVector(statePriorityVectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type allowedStatesList(allowedStatesListSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiscreteStates(stateSelection, stateDuration, patientIDs, patientData, statePriorityVector, allowedStatesList));
    return rcpp_result_gen;
END_RCPP
}
// removeAfterAbsorbingStatesContinuous
DataFrame removeAfterAbsorbingStatesContinuous(DataFrame patientData, std::vector<int> patientIDs, std::vector<std::string> absorbingStates);
RcppExport SEXP _Cohort2Trajectory_removeAfterAbsorbingStatesContinuous(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP absorbingStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type absorbingStates(absorbingStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(removeAfterAbsorbingStatesContinuous(patientData, patientIDs, absorbingStates));
    return rcpp_result_gen;
END_RCPP
}
// removeAfterAbsorbingStatesDiscrete
DataFrame removeAfterAbsorbingStatesDiscrete(DataFrame patientData, std::vector<int> patientIDs, std::vector<std::string> absorbingStates);
RcppExport SEXP _Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP absorbingStatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type absorbingStates(absorbingStatesSEXP);
    rcpp_result_gen = Rcpp::wrap(removeAfterAbsorbingStatesDiscrete(patientData, patientIDs, absorbingStates));
    return rcpp_result_gen;
END_RCPP
}
// removeProhibitedTransitionsContinuous
DataFrame removeProhibitedTransitionsContinuous(DataFrame patientData, std::vector<int> patientIDs, List allowedStatesList);
RcppExport SEXP _Cohort2Trajectory_removeProhibitedTransitionsContinuous(SEXP patientDataSEXP, SEXP patientIDsSEXP, SEXP allowedStatesListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type patientData(patientDataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type patientIDs(patientIDsSEXP);
    Rcpp::traits::input_parameter< List >::type allowedStatesList(allowedStatesListSEXP);
    rcpp_result_gen = Rcpp::wrap(removeProhibitedTransitionsContinuous(patientData, patientIDs, allowedStatesList));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Cohort2Trajectory_getDiscreteStates", (DL_FUNC) &_Cohort2Trajectory_getDiscreteStates, 6},
    {"_Cohort2Trajectory_removeAfterAbsorbingStatesContinuous", (DL_FUNC) &_Cohort2Trajectory_removeAfterAbsorbingStatesContinuous, 3},
    {"_Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete", (DL_FUNC) &_Cohort2Trajectory_removeAfterAbsorbingStatesDiscrete, 3},
    {"_Cohort2Trajectory_removeProhibitedTransitionsContinuous", (DL_FUNC) &_Cohort2Trajectory_removeProhibitedTransitionsContinuous, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Cohort2Trajectory(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
