[{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started","text":"Cohort2Trajectory package designed patients’ medical trajectory creation. accepts target cohort size OMOP CDM instance allows provide state cohorts populate observation time target cohort trajectories. package outputs patient level trajectories void time-interval described input state cohorts. trajectories can later used analysis, modeling visualization!","code":""},{"path":[]},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"initiating-the-database-connection","dir":"Articles","previous_headings":"Example with SampleCohort2Trajectory","what":"Initiating the database connection","title":"Getting started","text":"package relies heavily OMOP CDM, therefore database connection must initiated. CDMConnector package used establish database connection running Cohort2Trajecotry. can configure connection either reading credentials .Renviron file explicitly writing script. purpose example, let us use synthetic database.","code":"user <- Sys.getenv(\"DB_USERNAME\") pw <- Sys.getenv(\"DB_PASSWORD\") server <- stringr::str_c(Sys.getenv(\"DB_HOST\"), \"/\", Sys.getenv(\"DB_NAME\")) port <- Sys.getenv(\"DB_PORT\")  cdmSchema <-   Sys.getenv(\"OHDSI_CDM\") # Schema which contains the OHDSI Common Data Model cdmVocabSchema <-   Sys.getenv(\"OHDSI_VOCAB\") # Schema which contains the OHDSI Common Data Model vocabulary tables. cdmResultsSchema <-   Sys.getenv(\"OHDSI_RESULTS\") # Schema which contains \"cohort\" table (is not mandatory) writeSchema <-   Sys.getenv(\"OHDSI_WRITE\") # Schema for temporary tables, will be deleted writePrefix <- \"c2t_\"  db = DBI::dbConnect(   RPostgres::Postgres(),   dbname = Sys.getenv(\"DB_NAME\"),   host = Sys.getenv(\"DB_HOST\"),   user = Sys.getenv(\"DB_USERNAME\"),   password = Sys.getenv(\"DB_PASSWORD\"),   port  = port )  cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_schema = cdmSchema,   achille_schema = cdmResultsSchema,   write_schema = c(schema = writeSchema, prefix = writePrefix), ) db  <- DBI::dbConnect(duckdb::duckdb(), dbdir = CDMConnector::eunomia_dir(\"GiBleed\"))  # The Synthetic Eunomai database does not have defined cohorts, so let create a dummy table cohorts <- data.frame(subject_id = c(6,6,6,6,123,123,123),                          cohort_definition_id = c(1,2,3,2,1,2,3),                          cohort_start_date = c(as.Date(\"1970-01-01\"),                                                as.Date(\"1970-02-18\"),                                                as.Date(\"1970-03-02\"),                                                as.Date(\"1970-04-01\"),                                                as.Date(\"1968-01-05\"),                                                as.Date(\"1968-02-01\"),                                                as.Date(\"1968-03-12\")                          ),                          cohort_end_date = c(as.Date(\"1971-01-01\"),                                              as.Date(\"1970-02-28\"),                                              as.Date(\"1970-03-05\"),                                              as.Date(\"1970-04-15\"),                                              as.Date(\"1969-01-01\"),                                              as.Date(\"1968-02-04\"),                                              as.Date(\"1968-03-19\")) )  cdm <- CDMConnector::cdm_from_con(   con = db,   cdm_name = \"eunomia\",   cdm_schema = \"main\",   write_schema = \"main\" ) cdm <- omopgenerics::insertTable(cdm, cohorts, name =  \"cohort\") cdm$cohort <- omopgenerics::newCohortTable(cdm$cohort)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"study-configuration","dir":"Articles","previous_headings":"Example with SampleCohort2Trajectory","what":"Study configuration","title":"Getting started","text":"Warning output expected, study used example already exists.","code":"studyEnv <- cohort2TrajectoryConfiguration(   baseUrl = NULL,   studyName = \"SampleCohort2Trajectory\",   pathToStudy = getwd(),   atlasTargetCohort = 1, # The id of the target cohort   atlasStateCohorts = c(2, 3), # The ids of the state cohort   stateCohortLabels = c(\"test_state1\", \"test_state2\"),   stateCohortMandatory = c(\"test_state2\"),   stateCohortAbsorbing = c(\"test_state2\"),   outOfCohortAllowed = FALSE,   trajectoryType = \"Discrete\",   lengthOfStay = 30,   stateSelectionType = \"Priority\",   stateCohortPriorityOrder = c(\"test_state1\", \"test_state2\"),   runSavedStudy = FALSE,   useCDM = TRUE,   batchSize = 10 ) Warning message: Study name already in use, consider renaming!"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"importing-data","dir":"Articles","previous_headings":"Example with SampleCohort2Trajectory","what":"Importing data","title":"Getting started","text":"import preprocess data, following function used: Cleaned imported data /SampleCohort2Trahectory/Data folder. Expected output:","code":"getDataForStudy(cdm = cdm, studyEnv = studyEnv) > getDataForStudy(cdm = cdm,studyEnv = studyEnv) ✔ Importing data ... [64ms] ✔ Get cohort data success! ✔ Data cleaning completed! ℹ Saved cleaned data /Git/Cohort2Trajectory/SampleCohort2Trajectory/Data/importedDataCleaned_1.csv ✔ Cleaning data ... [170ms]"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"creating-trajectories","dir":"Articles","previous_headings":"Example with SampleCohort2Trajectory","what":"Creating trajectories","title":"Getting started","text":"create trajectories following function used: Expected output: Created trajectories /SampleCohort2Trajectory/Data folder.","code":"createTrajectories(cdm = cdm, runSavedStudy = F,studyEnv = studyEnv) ℹ Creating batch 1!!! ℹ Saved trajectory dataframe: /Git/Cohort2Trajectory/SampleCohort2Trajectory/Data/patientDataDiscrete.csv ℹ Saving trajectories to the specified temp schema ... ℹ Trajectories saved to the specified temp schema! ℹ Saved settings to: /Git/Cohort2Trajectory/SampleCohort2Trajectory/Settings/trajectorySettings.csv ✔ Trajectories generated!"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a00_introduction.html","id":"results","dir":"Articles","previous_headings":"Example with SampleCohort2Trajectory","what":"Results","title":"Getting started","text":"CSV Data Content disconnect:","code":"DBI::dbDisconnect(db)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"initiating-database-connection","dir":"Articles","previous_headings":"","what":"Initiating database connection","title":"Configuration","text":"use CDMConnector package establish database connection. can configure connection either reading credentials .Renviron file explicitly writing script.","code":"################################################################################ # # Initiate the database connection # #################################################################################  user <- Sys.getenv(\"DB_USERNAME\") pw <- Sys.getenv(\"DB_PASSWORD\") server <- stringr::str_c(Sys.getenv(\"DB_HOST\"), \"/\", Sys.getenv(\"DB_NAME\")) port <- Sys.getenv(\"DB_PORT\")  cdmSchema <-   Sys.getenv(\"OHDSI_CDM\") # Schema which contains the OHDSI Common Data Model cdmVocabSchema <-   Sys.getenv(\"OHDSI_VOCAB\") # Schema which contains the OHDSI Common Data Model vocabulary tables. cdmResultsSchema <-   Sys.getenv(\"OHDSI_RESULTS\") # Schema which contains \"cohort\" table (is not mandatory) writeSchema <-   Sys.getenv(\"OHDSI_WRITE\") # Schema for temporary tables, will be deleted writePrefix <- \"c2t_\"  db = DBI::dbConnect(   RPostgres::Postgres(),   dbname = Sys.getenv(\"DB_NAME\"),   host = Sys.getenv(\"DB_HOST\"),   user = Sys.getenv(\"DB_USERNAME\"),   password = Sys.getenv(\"DB_PASSWORD\"),   port  = port )  cdm <- CDMConnector::cdmFromCon(   con = db,   cdmSchema = cdmSchema,   achillesSchema = cdmResultsSchema,   writeSchema = c(schema = writeSchema, prefix = writePrefix), )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"configuration","dir":"Articles","previous_headings":"","what":"Configuration","title":"Configuration","text":"enhance user experience, R environment named studyEnv created, consolidates necessary parameters required running study. environment simplifies managing inputs ensures consistency across functions. Input description available . example configuration default values:","code":"################################################################################ # # Configure study settings # ################################################################################  studyEnv <- cohort2TrajectoryConfiguration(   cdm = cdm,   studyName = \"Cohort2Trajectory\",   baseUrl = \"http://localhost:8080/WebAPI\",   pathToStudy = getwd(),   atlasTargetCohort = NULL,   atlasStateCohorts = NULL,   stateCohortLabels = NULL,   stateCohortPriorityOrder = NULL,   stateCohortMandatory = NULL,   stateCohortAbsorbing = NULL,   stateSelectionType = NULL,   oocFix = \"None\",   trajectoryType = \"Discrete\",   lengthOfStay = NULL,   outOfCohortAllowed = FALSE,   runSavedStudy = FALSE,   useCDM = TRUE,   trajectoryDataObject = NULL,   pathToData = './Cohort2Trajectory/Data/importedData.csv',   allowedStatesList = createStateList(stateCohortLabels),   mergeStates = FALSE,   mergeThreshold = 0.5,   batchSize = 1000 )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"configuration-with-atlas","dir":"Articles","previous_headings":"Configuration","what":"Configuration with ATLAS","title":"Configuration","text":"","code":"studyEnv <- cohort2TrajectoryConfiguration(     baseUrl = \"http://localhost:8080/WebAPI\",     #<--- URL for API     useCDM = TRUE,                                #<--- set use CDM TRUE     studyName = \"nameForStudy\",     pathToStudy = getwd(),     atlasTargetCohort = 1,                 #<--- existing cohort's id     atlasStateCohorts = c(2, 3),           #<--- existing cohorts' ids     stateCohortLabels = c(\"label_for_cohort1\", \"label_for_cohort2\"),     stateCohortMandatory = c(\"label_for_cohort2\"),     stateCohortAbsorbing = c(\"label_for_cohort2\"),     outOfCohortAllowed = FALSE,     trajectoryType = \"Discrete\",     lengthOfStay = 30,     stateSelectionType = \"Priority\",     stateCohortPriorityOrder = c(\"label_for_cohort1\", \"label_for_cohort2\"),     runSavedStudy = FALSE,     batchSize = 10   )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"configuration-with-saved-study","dir":"Articles","previous_headings":"Configuration","what":"Configuration with saved study","title":"Configuration","text":"","code":"studyEnv <- cohort2TrajectoryConfiguration(     baseUrl = NULL,          useCDM = FALSE,                                     studyName = \"nameForStudy\",                   #<--- name of the study in trajectorySettings.csv     pathToStudy = getwd(),     stateCohortLabels = c(\"label_for_cohort1\", \"label_for_cohort2\"),     runSavedStudy = TRUE,                           #<--- set run saved study to true     batchSize = 10   )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"configuration-with-data-as-input","dir":"Articles","previous_headings":"Configuration","what":"Configuration with data as input","title":"Configuration","text":"","code":"studyEnv <- cohort2TrajectoryConfiguration(     baseUrl = NULL,        useCDM = FALSE,                            trajectoryDataObject = rawData,               #<--- eg output of read.csv     studyName = \"nameForStudy\",     pathToStudy = getwd(),     stateCohortMandatory = c(\"label_for_cohort2\"),     stateCohortAbsorbing = c(\"label_for_cohort2\"),     outOfCohortAllowed = FALSE,     trajectoryType = \"Discrete\",     lengthOfStay = 30,     stateSelectionType = \"Priority\",     stateCohortPriorityOrder = c(\"label_for_cohort1\", \"label_for_cohort2\"),     runSavedStudy = FALSE,     batchSize = 10   )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a01_configuration.html","id":"configuration-with-path-to-data-as-input","dir":"Articles","previous_headings":"Configuration","what":"Configuration with path to data as input","title":"Configuration","text":"","code":"studyEnv <- cohort2TrajectoryConfiguration(     baseUrl = NULL,        useCDM = FALSE,                            pathToData = paste0(getwd(), \"/path/to/data/data.csv\")), #<--- path to data as input     studyName = \"nameForStudy\",     pathToStudy = getwd(),     stateCohortMandatory = c(\"label_for_cohort2\"),     stateCohortAbsorbing = c(\"label_for_cohort2\"),     outOfCohortAllowed = FALSE,     trajectoryType = \"Discrete\",     lengthOfStay = 30,     stateSelectionType = \"Priority\",     stateCohortPriorityOrder = c(\"label_for_cohort1\", \"label_for_cohort2\"),     runSavedStudy = FALSE,     batchSize = 10   )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a02_import.html","id":"importing-data-for-study","dir":"Articles","previous_headings":"","what":"Importing data for study","title":"Import data","text":"section provides detailed explanation use getDataForStudy function. general overview, refer Getting Started section. Regarding data sources, three options: providing existing data, running saved study, using CDM data source. user opts using previous configuration, necessary inputs must provided manually. sample default values:","code":"getDataForStudy(cdm = cdm, studyEnv = studyEnv) getDataForStudy(   runSavedStudy = studyEnv$runSavedStudy,   useCDM = studyEnv$useCDM,   trajectoryDataObject = NULL,   cdm = NULL,   studyEnv = NULL,   atlasStateCohorts = studyEnv$atlasStateCohorts,   atlasTargetCohort = studyEnv$atlasTargetCohort,   stateCohortLabels = studyEnv$stateCohortLabels,   baseUrl = studyEnv$baseUrl,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   stateCohortMandatory = studyEnv$stateCohortMandatory,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   mergeStates = studyEnv$mergeStates,   mergeThreshold = studyEnv$mergeThreshold,   pathToData = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a02_import.html","id":"use-cdm","dir":"Articles","previous_headings":"Importing data for study","what":"Use CDM","title":"Import data","text":"use CDM data source, set useCDM variable TRUE. cohorts specified atlasStateCohorts atlasTargetCohort used. recommended set trajectoryDataObject, pathToData, runSavedStudy NULL.","code":"getDataForStudy(   runSavedStudy = NULL,   useCDM = studyEnv$useCDM,   trajectoryDataObject = NULL,   cdm = NULL,   studyEnv = NULL,   atlasStateCohorts = studyEnv$atlasStateCohorts,   atlasTargetCohort = studyEnv$atlasTargetCohort,   stateCohortLabels = studyEnv$stateCohortLabels,   baseUrl = studyEnv$baseUrl,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   stateCohortMandatory = studyEnv$stateCohortMandatory,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   mergeStates = studyEnv$mergeStates,   mergeThreshold = studyEnv$mergeThreshold,   pathToData = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a02_import.html","id":"without-atlas-support","dir":"Articles","previous_headings":"Importing data for study > Use CDM","what":"Without atlas support","title":"Import data","text":"use CDM without ATLAS support, ensure required JSON files located studyName/JSON. case, set baseUrl variable NULL.","code":"getDataForStudy(   runSavedStudy = NULL,   useCDM = studyEnv$useCDM,   trajectoryDataObject = NULL,   cdm = NULL,   studyEnv = NULL,   atlasStateCohorts = studyEnv$atlasStateCohorts,   atlasTargetCohort = studyEnv$atlasTargetCohort,   stateCohortLabels = studyEnv$stateCohortLabels,   baseUrl = NULL,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   stateCohortMandatory = studyEnv$stateCohortMandatory,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   mergeStates = studyEnv$mergeStates,   mergeThreshold = studyEnv$mergeThreshold,   pathToData = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a02_import.html","id":"run-saved-study","dir":"Articles","previous_headings":"Importing data for study","what":"Run saved study","title":"Import data","text":"saved study configuration used, previously set options overridden saved settings. recommended set trajectoryDataObject, pathToData, useCDM NULL.","code":"getDataForStudy(   runSavedStudy = studyEnv$runSavedStudy,   useCDM = NULL,   trajectoryDataObject = NULL,   cdm = NULL,   studyEnv = NULL,   atlasStateCohorts = studyEnv$atlasStateCohorts,   atlasTargetCohort = studyEnv$atlasTargetCohort,   stateCohortLabels = studyEnv$stateCohortLabels,   baseUrl = studyEnv$baseUrl,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   stateCohortMandatory = studyEnv$stateCohortMandatory,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   mergeStates = studyEnv$mergeStates,   mergeThreshold = studyEnv$mergeThreshold,   pathToData = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a02_import.html","id":"add-data-object-or-path-to-data","dir":"Articles","previous_headings":"Importing data for study","what":"Add data object or path to data","title":"Import data","text":"add data manually, provide either trajectoryDataObject pathToData input. suggested set useCDM runSavedStudy NULL. appending personal data existing datasets, refer create trajectories section.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a03_trajectories.html","id":"creating-trajectories","dir":"Articles","previous_headings":"","what":"Creating trajectories","title":"Create trajectories","text":"section outlines process creating trajectories, including handling edge cases. standard approach involves using default configuration, data import, preprocessing steps, described getting started. user opts using previous configuration, necessary inputs must provided manually. list default values:","code":"createTrajectories (cdm = cdm, studyEnv = studyEnv) createTrajectories(   cdm = NULL,   studyEnv = NULL,   trajectoryType = studyEnv$trajectoryType,   runSavedStudy = studyEnv$runSavedStudy,   oocFix = studyEnv$oocFix,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   lengthOfStay = studyEnv$lengthOfStay,   stateCohortLabels = studyEnv$stateCohortLabels,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   stateSelectionType = studyEnv$stateSelectionType,   stateCohortAbsorbing = studyEnv$stateCohortAbsorbing,   stateCohortMandatory = studyEnv$stateCohortMandatory,   allowedStatesList = studyEnv$allowedStatesList,   useCDM = studyEnv$useCDM,   pathToStudy = studyEnv$pathToStudy,   batchSize = studyEnv$batchSize )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/articles/a03_trajectories.html","id":"adding-personal-data-to-self-inserted-data","dir":"Articles","previous_headings":"Creating trajectories","what":"Adding personal data to self-inserted data","title":"Create trajectories","text":"include personal data patient age gender creating trajectories, ensure useCDM set TRUE.","code":"createTrajectories (   cdm = cdm,   studyEnv = studyEnv,   useCDM = TRUE )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Markus Haug. Author, maintainer. Greete Kelli Aava. Maintainer, contributor. Raivo Kolde. Author.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haug M, Kolde R (2025). Cohort2Trajectory: Package creating patient orientated treatment trajectories cohorts defined OHDSI ATLAS. R package version 1.2.0.","code":"@Manual{,   title = {Cohort2Trajectory: Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS},   author = {Markus Haug and Raivo Kolde},   year = {2025},   note = {R package version 1.2.0}, }"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"cohort2trajectory","dir":"","previous_headings":"","what":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"NOTE: refactoring CDMConnector package execution code significantly changed. can find old release v1.1.8 . (January 2025)","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Package Cohort2Trajectory creates patient orientated treatment trajectories cohorts defined OHDSI ATLAS. package can used access OMOP CDM database. package creates discrete continuous time trajectories (outputs .csv file) describe patients’ treatment time.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Sharing study: sharing trajectory generation parameters cohorts just share study folder settings file counterpart.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"technology","dir":"","previous_headings":"","what":"Technology","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Cohort2Trajectory R package, functions implemented C++. running package OMOP CDM, user must : Permissions select ohdsi cdm data schema. Permissions select ohdsi cdm results schema. Permissions select, create insert ohdsi temp/scratch schema.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Package wiki: Cohort2Trajectory.pdf","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Cohort2Trajectory licensed Apache License 2.0","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Cohort2Trajectory developed R Studio. Feel free contact maintainer questions: markus.haug@ut.ee","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"HealthInformaticsUT/CohortContrast HealthInformaticsUT/TrajectoryMarkovAnalysis HealthInformaticsUT/TrajectoryViz","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"publications","dir":"","previous_headings":"","what":"Publications","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Markus Haug, Marek Oja, Maarja Pajusalu, Kerli Mooses, Sulev Reisberg, Jaak Vilo, Antonio Fernández Giménez, Thomas Falconer, Ana Danilović, Filip Maljkovic, Dalia Dawoud, Raivo Kolde, Markov modeling cost-effectiveness using federated health data network, Journal American Medical Informatics Association, 2024;, ocae044, https://doi.org/10.1093/jamia/ocae044","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Haug, M. (2023, May). Cohort2Trajectory, v1.1.3. GitHub. https://github.com/HealthInformaticsUT/Cohort2Trajectory/releases/tag/v1.1.3","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Package for creating patient orientated treatment trajectories from cohorts defined in OHDSI ATLAS","text":"Research group Health-Informatics University Tartu https://health-informatics.cs.ut.ee/","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addListVectorEl.html","id":null,"dir":"Reference","previous_headings":"","what":"Add element from list element's vector — addListVectorEl","title":"Add element from list element's vector — addListVectorEl","text":"Add element list element's vector","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addListVectorEl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add element from list element's vector — addListVectorEl","text":"","code":"addListVectorEl(stateList, transitionHead, transitionTail)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addListVectorEl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add element from list element's vector — addListVectorEl","text":"stateList List states storing possible destination states transitionHead State label state transition coming transitionTail State label state transition going ","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addPersonalData.html","id":null,"dir":"Reference","previous_headings":"","what":"This function adds personal data to subjects: age, gender — addPersonalData","title":"This function adds personal data to subjects: age, gender — addPersonalData","text":"function adds personal data subjects: age, gender","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addPersonalData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function adds personal data to subjects: age, gender — addPersonalData","text":"","code":"addPersonalData(cohortData, cdm)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addPersonalData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function adds personal data to subjects: age, gender — addPersonalData","text":"cohortData Imported cohort data cdm cdm object","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/addPersonalData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function adds personal data to subjects: age, gender — addPersonalData","text":"dataframe selected patients. Columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cleanCohortData.html","id":null,"dir":"Reference","previous_headings":"","what":"This function eliminates patients which do not fulfill the inclusion criteria — cleanCohortData","title":"This function eliminates patients which do not fulfill the inclusion criteria — cleanCohortData","text":"function eliminates patients fulfill inclusion criteria","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cleanCohortData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function eliminates patients which do not fulfill the inclusion criteria — cleanCohortData","text":"","code":"cleanCohortData(   cohortData,   mandatoryStates,   outOfCohortAllowed = FALSE,   mergeStates = FALSE,   mergeThreshold = 0.5 )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cleanCohortData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function eliminates patients which do not fulfill the inclusion criteria — cleanCohortData","text":"cohortData Imported cohort data mandatoryStates States present trajectory, otherwise dropped#' outOfCohortAllowed boolean whether patient trajectory can surpass target cohort's observation-period mergeStates Boolean, want merge states overlap mergeThreshold Value 0 1. mergeStates TRUE states label-merged given overlap specified threshold. Can given vector, multiple iterations runned,","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cleanCohortData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function eliminates patients which do not fulfill the inclusion criteria — cleanCohortData","text":"dataframe selected patients. Columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cohort2TrajectoryConfiguration.html","id":null,"dir":"Reference","previous_headings":"","what":"C2T configuration for initiating the parameter values in the study environment — cohort2TrajectoryConfiguration","title":"C2T configuration for initiating the parameter values in the study environment — cohort2TrajectoryConfiguration","text":"C2T configuration initiating parameter values study environment","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cohort2TrajectoryConfiguration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C2T configuration for initiating the parameter values in the study environment — cohort2TrajectoryConfiguration","text":"","code":"cohort2TrajectoryConfiguration(   cdm = NULL,   studyName = \"Cohort2Trajectory\",   baseUrl = \"http://localhost:8080/WebAPI\",   pathToStudy = getwd(),   atlasTargetCohort = NULL,   atlasStateCohorts = NULL,   stateCohortLabels = NULL,   stateCohortPriorityOrder = NULL,   stateCohortMandatory = NULL,   stateCohortAbsorbing = NULL,   stateSelectionType = NULL,   oocFix = \"None\",   trajectoryType = \"Discrete\",   lengthOfStay = NULL,   outOfCohortAllowed = FALSE,   runSavedStudy = FALSE,   useCDM = TRUE,   trajectoryDataObject = NULL,   pathToData = \"./Cohort2Trajectory/Data/importedData.csv\",   allowedStatesList = createStateList(stateCohortLabels),   mergeStates = FALSE,   mergeThreshold = 0.5,   batchSize = 1000 )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cohort2TrajectoryConfiguration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C2T configuration for initiating the parameter values in the study environment — cohort2TrajectoryConfiguration","text":"cdm object created CDMConnector studyName name chosen study, used folder name baseUrl base URL WebApi instance pathToStudy path folder contains folder named studyName atlasTargetCohort id target cohort defined OHDSI tool ATLAS atlasStateCohorts ids state cohorts defined OHDSI tool ATLAS stateCohortLabels vector customized labels state cohorts stateCohortPriorityOrder vector customized labels state cohorts priority order stateCohortMandatory vector customized labels state cohorts mandatory trajectory stateCohortAbsorbing vector customized labels state cohorts absorbing stateSelectionType type state selection (\"First\" - First occurring, \"Overlap\" - Max overlap, \"Priority\" - Priority) oocFix method use replacing \"COHORT\" states relevant states (\"None\" -> \"COHORT\"; \"Last present state\" -> repeat last one; random str -> used state) trajectoryType type trajectory (\"Discrete\" - Discrete time, \"Continuous\" - Continuous time) lengthOfStay length stay (days) one state (Effect discrete case) outOfCohortAllowed boolean whether patient trajectory can surpass target cohort's observation-period runSavedStudy running predefined study studyName/Settings/trajectorySettings.csv useCDM package can also run without OMOP CDM trajectoryDataObject using without OMOP CDM specify data file  (specified need pathToData) pathToData using without OMOP CDM specify path data file (specified need trajectoryDataObject) allowedStatesList list object indicates accessible states said state mergeStates Boolean, want merge states overlap mergeThreshold Value 0 1. mergeStates TRUE states label-merged given overlap specified threshold. Can given vector, multiple iterations runned, batchSize customizable batch size cohort generation","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/cohort2TrajectoryConfiguration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"C2T configuration for initiating the parameter values in the study environment — cohort2TrajectoryConfiguration","text":"","code":"if (FALSE) cohort2TrajectoryConfiguration(cdm = cdm, studyName = \"TestCohort2Trajectory\", baseUrl = NULL, pathToStudy = getwd(), atlasTargetCohort = 0, atlasStateCohorts = c(1, 2), stateCohortLabels = c(\"test_label1\", \"test_label2\"), ) # \\dontrun{}"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createMandatorySubDirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Function which creates mandatory subdirectories and files to the pathToStudy directory — createMandatorySubDirs","title":"Function which creates mandatory subdirectories and files to the pathToStudy directory — createMandatorySubDirs","text":"Function creates mandatory subdirectories files pathToStudy directory","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createMandatorySubDirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function which creates mandatory subdirectories and files to the pathToStudy directory — createMandatorySubDirs","text":"","code":"createMandatorySubDirs(pathToStudy, studyName)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createMandatorySubDirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function which creates mandatory subdirectories and files to the pathToStudy directory — createMandatorySubDirs","text":"pathToStudy Path package","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createStateList.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a list of all states (as elements) for each state (as index) — createStateList","title":"Create a list of all states (as elements) for each state (as index) — createStateList","text":"Create list states (elements) state (index)","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createStateList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a list of all states (as elements) for each state (as index) — createStateList","text":"","code":"createStateList(stateVector)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createStateList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a list of all states (as elements) for each state (as index) — createStateList","text":"stateVector Vector defines state labels","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createTrajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate trajectories using the logic specified in the configuration — createTrajectories","title":"Generate trajectories using the logic specified in the configuration — createTrajectories","text":"Generate trajectories using logic specified configuration","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createTrajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate trajectories using the logic specified in the configuration — createTrajectories","text":"","code":"createTrajectories(   cdm = NULL,   studyEnv = NULL,   trajectoryType = studyEnv$trajectoryType,   runSavedStudy = studyEnv$runSavedStudy,   oocFix = studyEnv$oocFix,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   lengthOfStay = studyEnv$lengthOfStay,   stateCohortLabels = studyEnv$stateCohortLabels,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   stateSelectionType = studyEnv$stateSelectionType,   stateCohortAbsorbing = studyEnv$stateCohortAbsorbing,   stateCohortMandatory = studyEnv$stateCohortMandatory,   allowedStatesList = studyEnv$allowedStatesList,   useCDM = studyEnv$useCDM,   pathToStudy = studyEnv$pathToStudy,   batchSize = studyEnv$batchSize )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createTrajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate trajectories using the logic specified in the configuration — createTrajectories","text":"cdm object created CDMConnector studyEnv environment created cohort2TrajectoryConfiguration trajectoryType type trajectory (\"Discrete\" - Discrete time, \"Continuous\" - Continuous time) runSavedStudy running predefined study studyName/Settings/trajectorySettings.csv oocFix method use replacing \"COHORT\" states relevant states (\"None\" -> \"COHORT\"; \"Last present state\" -> repeat last one; random str -> used state) outOfCohortAllowed boolean whether patient trajectory can surpass target cohort's observation-period lengthOfStay length stay (days) one state (Effect discrete case) stateCohortLabels vector customized labels state cohorts stateCohortPriorityOrder vector customized labels state cohorts priority order stateSelectionType type state selection (\"First\" - First occurring, \"Overlap\" - Max overlap, \"Priority\" - Priority) stateCohortAbsorbing vector customized labels state cohorts absorbing stateCohortMandatory vector customized labels state cohorts mandatory trajectory allowedStatesList list object indicates accessible states said state useCDM package can also run without OMOP CDM pathToStudy path directory contains study folder batchSize customizable batch size trajectory generation process","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createTrajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate trajectories using the logic specified in the configuration — createTrajectories","text":"dataframe trajectories","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/createTrajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate trajectories using the logic specified in the configuration — createTrajectories","text":"","code":"if (FALSE) createTrajectories(cdm = cdm, runSavedStudy = F,studyEnv = studyEnv) # \\dontrun{}"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/daysOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for calculating overlap in date intervals — daysOverlap","title":"Function for calculating overlap in date intervals — daysOverlap","text":"Function calculating overlap date intervals","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/daysOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for calculating overlap in date intervals — daysOverlap","text":"","code":"daysOverlap(dateStart, dateEnd, controlStart, controlEnd)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/daysOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for calculating overlap in date intervals — daysOverlap","text":"dateStart Start boundary date interval dateEnd End boundary date interval controlStart Start date interval interest controlEnd End date interval interest","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/dot-toJSON.html","id":null,"dir":"Reference","previous_headings":"","what":"Function which converts text formatted JSON to digestible JSON — .toJSON","title":"Function which converts text formatted JSON to digestible JSON — .toJSON","text":"Function converts text formatted JSON digestible JSON","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/dot-toJSON.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function which converts text formatted JSON to digestible JSON — .toJSON","text":"","code":".toJSON(input, pretty = FALSE)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/dot-toJSON.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function which converts text formatted JSON to digestible JSON — .toJSON","text":"input Text formatted JSON needs conversion digestible JSON","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/generateCohortSetCSV.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cohort set CSV — generateCohortSetCSV","title":"Generate cohort set CSV — generateCohortSetCSV","text":"internal function generating cohort set CSV CDMConnector generateCohorts","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/generateCohortSetCSV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cohort set CSV — generateCohortSetCSV","text":"","code":"generateCohortSetCSV(selectedStates, stateCohortLabels, pathToStudy, studyName)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/generateCohortSetCSV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cohort set CSV — generateCohortSetCSV","text":"selectedStates states included db query stateCohortLabels user inserted labels non target states pathToStudy path folder contains study folder studyName name study directory","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/generateCohortSetCSV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cohort set CSV — generateCohortSetCSV","text":"cohortSetCSV df","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohortData.html","id":null,"dir":"Reference","previous_headings":"","what":"Get selected generated cohorts patient data — getCohortData","title":"Get selected generated cohorts patient data — getCohortData","text":"function queries patient ID's selected cohorts","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohortData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get selected generated cohorts patient data — getCohortData","text":"","code":"getCohortData(   cdm,   studyEnv,   selectedTarget,   selectedStates,   baseUrl = \"http://localhost:8080/WebAPI\",   pathToStudy = studyEnv$pathToStudy,   studyName = studyEnv$studyName,   stateCohortLabels = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohortData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get selected generated cohorts patient data — getCohortData","text":"cdm common data model reference object studyEnv environment created cohort2TrajectoryConfiguration selectedTarget sample cohort ID selectedStates Vector included cohort ID's baseUrl base URL WebApi instance pathToStudy path folder contains folder named studyName studyName name chosen study, used folder name stateCohortLabels Vector customized labels state cohorts","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohortData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get selected generated cohorts patient data — getCohortData","text":"dataframe selected patients. Columns: cohort_definition_id, subject_id, cohort_start_date, cohort_end_date","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohorts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all generated cohort IDs — getCohorts","title":"Get all generated cohort IDs — getCohorts","text":"function queries generated cohorts Atlas","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohorts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all generated cohort IDs — getCohorts","text":"","code":"getCohorts(cdm)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohorts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all generated cohort IDs — getCohorts","text":"cdm common data model reference object","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getCohorts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all generated cohort IDs — getCohorts","text":"sorted vector generated cohorts","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getDataForStudy.html","id":null,"dir":"Reference","previous_headings":"","what":"Import the data from CDM for the study — getDataForStudy","title":"Import the data from CDM for the study — getDataForStudy","text":"Import data CDM study","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getDataForStudy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import the data from CDM for the study — getDataForStudy","text":"","code":"getDataForStudy(   runSavedStudy = studyEnv$runSavedStudy,   useCDM = studyEnv$useCDM,   trajectoryDataObject = NULL,   cdm = NULL,   studyEnv = NULL,   atlasStateCohorts = studyEnv$atlasStateCohorts,   atlasTargetCohort = studyEnv$atlasTargetCohort,   stateCohortLabels = studyEnv$stateCohortLabels,   baseUrl = studyEnv$baseUrl,   outOfCohortAllowed = studyEnv$outOfCohortAllowed,   stateCohortMandatory = studyEnv$stateCohortMandatory,   stateCohortPriorityOrder = studyEnv$stateCohortPriorityOrder,   mergeStates = studyEnv$mergeStates,   mergeThreshold = studyEnv$mergeThreshold,   pathToData = NULL )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getDataForStudy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import the data from CDM for the study — getDataForStudy","text":"runSavedStudy running predefined study studyName/Settings/trajectorySettings.csv useCDM package can also run without OMOP CDM trajectoryDataObject using without OMOP CDM specify data file  (specified need pathToData) cdm object created CDMConnector studyEnv environment created cohort2TrajectoryConfiguration atlasStateCohorts ids state cohorts defined OHDSI tool ATLAS atlasTargetCohort id target cohort defined OHDSI tool ATLAS stateCohortLabels vector customized labels state cohorts baseUrl base URL WebApi instance outOfCohortAllowed boolean whether patient trajectory can surpass target cohort's observation-period stateCohortMandatory vector customized labels state cohorts mandatory trajectory stateCohortPriorityOrder vector customized labels state cohorts priority order mergeStates Boolean, want merge states overlap mergeThreshold Value 0 1. mergeStates TRUE states label-merged given overlap specified threshold. Can given vector, multiple iterations runned, pathToData using without OMOP CDM specify path data file (specified need trajectoryDataObject)","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getDataForStudy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import the data from CDM for the study — getDataForStudy","text":"log info","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getDataForStudy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import the data from CDM for the study — getDataForStudy","text":"","code":"if (FALSE) getDataForStudy(cdm = cdm,studyEnv = studyEnv) # \\dontrun{}"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getInclusionTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Build table for cohorts which shows the inclusion statistics — getInclusionTable","title":"Build table for cohorts which shows the inclusion statistics — getInclusionTable","text":"function creates inclusion table getCohortsPatients() function data","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getInclusionTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build table for cohorts which shows the inclusion statistics — getInclusionTable","text":"","code":"getInclusionTable(cohortData, selectedCohorts, cohortLabels = NULL)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getInclusionTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build table for cohorts which shows the inclusion statistics — getInclusionTable","text":"cohortData Output getCohortsPatients() selectedCohorts Vector included cohort ID's cohortLabels Labels cohort","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getInclusionTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build table for cohorts which shows the inclusion statistics — getInclusionTable","text":"dataframe selected cohort relation target cohort","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesContinuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare patientData dataframe for msm package — getTrajectoriesContinuous","title":"Prepare patientData dataframe for msm package — getTrajectoriesContinuous","text":"function prepares patientData dataframe msm package","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesContinuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare patientData dataframe for msm package — getTrajectoriesContinuous","text":"","code":"getTrajectoriesContinuous(   cdm,   patientData,   stateSelection,   statePriorityVector,   absorbingStates = NULL,   studyName = \"\",   addPersonalData = TRUE,   allowedStatesList = list() )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesContinuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare patientData dataframe for msm package — getTrajectoriesContinuous","text":"cdm cdm object patientData Object class data.frame columns subject_id, state_label, STATE_START_DATE, STATE_END_DATE stateSelection Selection type ordering statePriorityVector states prioritized order absorbingStates Absorbing states dataframe studyName name chosen study, used folder name addPersonalData Logical, indicating whether add personal data patient allowedStatesList list object indicates accessible states said state","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesContinuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare patientData dataframe for msm package — getTrajectoriesContinuous","text":"dataframe ready using msm package","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesDiscrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the imported cohort data to patient treatmnet trajectories — getTrajectoriesDiscrete","title":"Convert the imported cohort data to patient treatmnet trajectories — getTrajectoriesDiscrete","text":"function outputs data.frame object describes movement patients defined states","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesDiscrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the imported cohort data to patient treatmnet trajectories — getTrajectoriesDiscrete","text":"","code":"getTrajectoriesDiscrete(   cdm,   cohortData,   stateDuration = 30,   stateSelection = 1,   statePriorityVector = NULL,   absorbingStates = NULL,   oocFix = \"None\",   studyName = \"\",   addPersonalData = TRUE,   allowedStatesList = list() )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/getTrajectoriesDiscrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the imported cohort data to patient treatmnet trajectories — getTrajectoriesDiscrete","text":"cdm cdm object cohortData data.frame object queried getCohortsPatients function stateDuration length discrete state stateSelection chosen state selection method statePriorityVector order priority states absorbingStates absorbing states: patient trajectory ends oocFix method use replacing \"COHORT\" states relevant states studyName name chosen study, used folder name addPersonalData Logical, indicating whether add personal data patient allowedStatesList list object indicates accessible states said state","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/idExists.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for controlling whether patient exists in a cohort — idExists","title":"Function for controlling whether patient exists in a cohort — idExists","text":"Function controlling whether patient exists cohort","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/idExists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for controlling whether patient exists in a cohort — idExists","text":"","code":"idExists(data, id)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/idExists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for controlling whether patient exists in a cohort — idExists","text":"data dataframe object subject_id values id subject ID","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/is.nan.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for finding NaN values in a data.frame object — is.nan.data.frame","title":"Function for finding NaN values in a data.frame object — is.nan.data.frame","text":"Function finding NaN values data.frame object","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/is.nan.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for finding NaN values in a data.frame object — is.nan.data.frame","text":"","code":"# S3 method for class 'data.frame' is.nan(data)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/is.nan.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for finding NaN values in a data.frame object — is.nan.data.frame","text":"data SQL data.frame object","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/is_overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check if two periods overlap — is_overlap","title":"Function to check if two periods overlap — is_overlap","text":"Function check two periods overlap","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/is_overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check if two periods overlap — is_overlap","text":"","code":"is_overlap(start1, end1, start2, end2)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadRenderTranslateSql.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and translate SQL file or an explicit SQL query to desired dialect. — loadRenderTranslateSql","title":"Load and translate SQL file or an explicit SQL query to desired dialect. — loadRenderTranslateSql","text":"Load translate SQL file explicit SQL query desired dialect.","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadRenderTranslateSql.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and translate SQL file or an explicit SQL query to desired dialect. — loadRenderTranslateSql","text":"","code":"loadRenderTranslateSql(   sql,   dbms = \"postgresql\",   warnOnMissingParameters = TRUE,   output = FALSE,   outputFile,   ... )"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadRenderTranslateSql.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and translate SQL file or an explicit SQL query to desired dialect. — loadRenderTranslateSql","text":"sql SQL file name SQL query warnOnMissingParameters warning raised parameters provided function appear parameterized SQL rendered? default, TRUE. output .sql file created result outputFile Name output file","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Load settings of the study from trajectorySettings.csv according to the customized paramater studyName — loadSettings","title":"Load settings of the study from trajectorySettings.csv according to the customized paramater studyName — loadSettings","text":"Load settings study trajectorySettings.csv according customized paramater studyName","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load settings of the study from trajectorySettings.csv according to the customized paramater studyName — loadSettings","text":"","code":"loadSettings(studyName, pathToStudy)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/loadSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load settings of the study from trajectorySettings.csv according to the customized paramater studyName — loadSettings","text":"studyName Customized name study","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/merge_overlaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom function to merge overlapping date ranges within each group — merge_overlaps","title":"Custom function to merge overlapping date ranges within each group — merge_overlaps","text":"Custom function merge overlapping date ranges within group","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/merge_overlaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom function to merge overlapping date ranges within each group — merge_overlaps","text":"","code":"merge_overlaps(data)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/merge_overlaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom function to merge overlapping date ranges within each group — merge_overlaps","text":"data dataframe raw cohort data","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/ordered_combinations.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector with all possible combinations preserving the priority order — ordered_combinations","title":"Create a vector with all possible combinations preserving the priority order — ordered_combinations","text":"Create vector possible combinations preserving priority order","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/ordered_combinations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector with all possible combinations preserving the priority order — ordered_combinations","text":"","code":"ordered_combinations(states, n)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/ordered_combinations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector with all possible combinations preserving the priority order — ordered_combinations","text":"states Vector states n largest number combinations possible","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/removeListVectorEl.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove element from list element's vector — removeListVectorEl","title":"Remove element from list element's vector — removeListVectorEl","text":"Remove element list element's vector","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/removeListVectorEl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove element from list element's vector — removeListVectorEl","text":"","code":"removeListVectorEl(stateList, transitionHead, transitionTail)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/removeListVectorEl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove element from list element's vector — removeListVectorEl","text":"stateList List states storing possible destination states transitionHead State label state transition coming transitionTail State label state transition going ","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_filenames.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize filenames not in correct format — sanitize_filenames","title":"Sanitize filenames not in correct format — sanitize_filenames","text":"Sanitize filenames correct format","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_filenames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize filenames not in correct format — sanitize_filenames","text":"","code":"sanitize_filenames(input_strings)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_filenames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize filenames not in correct format — sanitize_filenames","text":"input_strings vector state label names","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to sanitize a single string — sanitize_single","title":"Function to sanitize a single string — sanitize_single","text":"Function sanitize single string","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to sanitize a single string — sanitize_single","text":"","code":"sanitize_single(input_string)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/sanitize_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to sanitize a single string — sanitize_single","text":"input_string  state label name","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/save_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for saving summary tables to path — save_object","title":"Function for saving summary tables to path — save_object","text":"Function saving summary tables path","code":""},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/save_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for saving summary tables to path — save_object","text":"","code":"save_object(object, path)"},{"path":"https://healthinformaticsut.github.io/Cohort2Trajectory/reference/save_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for saving summary tables to path — save_object","text":"object Object save path Path file saved","code":""}]
