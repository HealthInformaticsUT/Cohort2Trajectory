% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Cohort2Trajectory.R
\name{Cohort2Trajectory}
\alias{Cohort2Trajectory}
\title{This function creates patient treatment trajectories}
\usage{
Cohort2Trajectory(
  dbms = "postgresql",
  connection = NULL,
  cdmSchema = "ohdsi_cdm",
  cdmTmpSchema = "ohdsi_temp",
  cdmResultsSchema = "ohdsi_results",
  studyName = "Cohort2Trajectory",
  baseUrl = "http://localhost:8080/WebAPI",
  atlasTargetCohort = NULL,
  atlasStateCohorts = NULL,
  stateCohortLabels = NULL,
  stateCohortPriorityOrder = NULL,
  stateCohortMandatory = NULL,
  stateCohortAbsorbing = NULL,
  stateSelectionType = NULL,
  oocFix = "None",
  trajectoryType = NULL,
  lengthOfStay = NULL,
  outOfCohortAllowed = NULL,
  runSavedStudy = FALSE,
  pathToResults = getwd(),
  useCDM = TRUE,
  pathToData = "./tmp/datasets/importedData.csv",
  allowedStatesList = createStateList(stateCohortLabels)
)
}
\arguments{
\item{dbms}{The type of DBMS running on the server. Valid values are: 'oracle','postgresql','redshift','sql server','pdw', 'netezza','bigquery','sqlite', 'sqlite extended','spark'}

\item{connection}{Connection to database}

\item{cdmSchema}{Schema which contains the OHDSI Common Data Model.}

\item{cdmTmpSchema}{Schema for temporary tables, will be deleted.}

\item{cdmResultsSchema}{Schema which has the information about the cohorts created in Atlas}

\item{atlasTargetCohort}{The id of the target cohort defined in OHDSI tool ATLAS}

\item{atlasStateCohorts}{The ids of the state cohorts defined in OHDSI tool ATLAS}

\item{stateCohortLabels}{Vector of the customized labels of the state cohorts}

\item{stateCohortPriorityOrder}{Vector of the customized labels of the state cohorts in priority order}

\item{stateCohortMandatory}{Vector of the customized labels of the state cohorts which are mandatory in trajectory}

\item{stateCohortAbsorbing}{Vector of the customized labels of the state cohorts which are absorbing}

\item{stateSelectionType}{The type of state selection (1 - First occurring, 2 - Max overlap, 3 - Priority)}

\item{oocFix}{The method to use for replacing "OUT OF COHORT" states with more relevant states}

\item{trajectoryType}{The type of the trajectory (0 - Discrete time, 1 - Continuous time)}

\item{lengthOfStay}{The length of stay (days) in one state (Effect only in discrete case)}

\item{outOfCohortAllowed}{boolean whether the patient trajectory can surpass the target cohort's observation-period}

\item{useCDM}{The package can also be run without the OMOP CDM}

\item{pathToData}{When using without OMOP CDM specify the path to data file}

\item{allowedStatesList}{A list object which indicates accessible states from said state}
}
\description{
This function creates patient treatment trajectories
}
\examples{
################################################################################
#
# Example on Eunomia
#
################################################################################

studyName = "TestCohort2Trajectory" #TODO
pathToResults <<-getwd() #TODO

################################################################################
#
# Database credentials
#
################################################################################
pathToDriver = './Drivers'
dbms <- "sqlite" #TODO

cdmSchema = "main" #TODO # Schema which contains the OHDSI Common Data Model
cdmTmpSchema = "main" #TODO # Schema for temporary tables, will be deleted # should be ohdsi_temp
cdmResultsSchema = "main" #TODO # Schema which will contain the final results

baseUrl = NULL #TODO # WebAPI URL is not needed when jsons' are already imported


################################################################################
#
# Initiate the database connection
#
################################################################################
connectionDetails <- Eunomia::getEunomiaConnectionDetails()
conn <- DatabaseConnector::connect(connectionDetails)
Eunomia::createCohorts(connectionDetails)


################################################################################
#
# Run the study
#
################################################################################

Cohort2Trajectory::Cohort2Trajectory(
  dbms = dbms,
  connection = conn,
  cdmSchema = cdmSchema,
  cdmTmpSchema = cdmTmpSchema,
  cdmResultsSchema = cdmResultsSchema,
  studyName = studyName,
  baseUrl = baseUrl,
  atlasTargetCohort = 1,
  atlasStateCohorts = c(3,4),
  stateCohortLabels = c("TestState1", "TestState2"),
  stateCohortPriorityOrder = c("TestState1", "TestState2"),
  stateCohortMandatory = c("TestState2"),
  stateCohortAbsorbing = c("TestState2"),
  ##############################################################################
  # stateSelectionTypes
  # 1 - First occurring
  # 2 - Largest overlap
  # 3 - Priority ordering
  ##############################################################################
  stateSelectionType = 3,
  ##############################################################################
  # trajectoryType
  # 0 - Discrete time
  # 1 - Continuous time
  ##############################################################################
  trajectoryType = 0,
 ##############################################################################
 # oocFix --> Out of cohort fix
 # None
 # Last present state
 # any of the defined states
 ##############################################################################
  oocFix = "None",
  lengthOfStay = 30,
  outOfCohortAllowed = TRUE,
  runSavedStudy = FALSE,
  pathToResults = pathToResults,
  allowedStatesList = createStateList(stateCohortLabels)
)
}
